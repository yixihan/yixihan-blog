(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{469:function(v,_,t){"use strict";t.r(_);var o=t(2),e=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"计网面经"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计网面经"}},[v._v("#")]),v._v(" 计网面经")]),v._v(" "),_("h2",{attrs:{id:"应用层常见协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用层常见协议"}},[v._v("#")]),v._v(" 应用层常见协议")]),v._v(" "),_("p",[v._v("应用层常见协议一共有  种 :")]),v._v(" "),_("ul",[_("li",[_("strong",[_("code",[v._v("HTTP")]),v._v(" : 超文本传输协议")])]),v._v(" "),_("li",[_("strong",[_("code",[v._v("STMP")]),v._v(" : 简单邮件传输协议")])]),v._v(" "),_("li",[_("strong",[_("code",[v._v("POP3")]),v._v(" / "),_("code",[v._v("IMAP")]),v._v(" : 邮件接收协议")])]),v._v(" "),_("li",[_("strong",[_("code",[v._v("FTP")]),v._v(" : 文件传输协议")])]),v._v(" "),_("li",[_("strong",[_("code",[v._v("SSH")]),v._v(" : 安全的网络传输协议")])]),v._v(" "),_("li",[_("strong",[_("code",[v._v("Telnet")]),v._v(" : 远程登录协议")])])]),v._v(" "),_("h3",{attrs:{id:"http-超文本传输协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-超文本传输协议"}},[v._v("#")]),v._v(" HTTP : 超文本传输协议")]),v._v(" "),_("p",[_("strong",[v._v("超文本传输协议 ("),_("code",[v._v("HTTP")]),v._v(", "),_("code",[v._v("HyperText Transfer Protocol")]),v._v(")")]),v._v(" 主要是为 "),_("code",[v._v("Web")]),v._v(" 浏览器与 "),_("code",[v._v("Web")]),v._v(" 服务器之间的通信而设计的. 当我们使用浏览器浏览网页的时候, 我们网页就是通过 "),_("code",[v._v("HTTP")]),v._v(" 请求进行加载的, 整个过程如下图所示")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101523214.png",alt:"img"}})]),v._v(" "),_("p",[_("code",[v._v("HTTP")]),v._v(" 协议是基于 "),_("code",[v._v("TCP")]),v._v(" 协议, 发送 "),_("code",[v._v("HTTP")]),v._v(" 请求之前首先要建立 "),_("code",[v._v("TCP")]),v._v(" 连接, "),_("strong",[v._v("也就是要经历三次握手")])]),v._v(" "),_("p",[v._v("目前使用的 "),_("code",[v._v("HTTP")]),v._v(" 协议大部分都是 1.1. 在 1.1 的协议里面, 默认是开启了 "),_("code",[v._v("Keep-Alive")]),v._v(" 的, 这样的话建立的连接就可以在多次请求中被复用了")]),v._v(" "),_("p",[v._v("另外, "),_("code",[v._v("HTTP")]),v._v(" 协议是 "),_("strong",[v._v('"无状态"')]),v._v(" 协议, 它无法记录客户端用户的状态, 一般我们都是通过 "),_("code",[v._v("Session")]),v._v(" 来记录客户端用户的状态")]),v._v(" "),_("h3",{attrs:{id:"smtp-简单邮件传输协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#smtp-简单邮件传输协议"}},[v._v("#")]),v._v(" SMTP : 简单邮件传输协议")]),v._v(" "),_("p",[_("strong",[v._v("简单邮件传输协议 ("),_("code",[v._v("STMP")]),v._v(", "),_("code",[v._v("Simple Mail Transfer Protocol")]),v._v(")")]),v._v(" 基于 "),_("code",[v._v("TCP")]),v._v(" 协议, 用来发送电子邮件")]),v._v(" "),_("blockquote",[_("p",[v._v("小贴士")])]),v._v(" "),_("p",[v._v("接受邮件的协议不是 "),_("code",[v._v("SMTP")]),v._v(" 而是 "),_("code",[v._v("POP3")])]),v._v(" "),_("h4",{attrs:{id:"电子邮件的发送过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#电子邮件的发送过程"}},[v._v("#")]),v._v(" 电子邮件的发送过程")]),v._v(" "),_("p",[v._v('比如我的邮箱是 "dabai@cszhinan.com", 我要向"xiaoma@qq.com" 发送邮件, 整个过程可以简单分为下面几步 :')]),v._v(" "),_("ol",[_("li",[v._v("通过 "),_("strong",[_("code",[v._v("SMTP")])]),v._v(" 协议, 我将我写好的邮件交给 163 邮箱服务器 (邮局)")]),v._v(" "),_("li",[v._v("163 邮箱服务器发现我发送的邮箱是 qq 邮箱, 然后它使用 "),_("code",[v._v("SMTP")]),v._v(" 协议将我的邮件转发到 qq 邮箱服务器")]),v._v(" "),_("li",[v._v('qq 邮箱服务器接收邮件之后就通知邮箱为 "xiaoma@qq.com" 的用户来收邮件, 然后用户就通过 '),_("strong",[_("code",[v._v("POP3/IMAP")])]),v._v(" 协议将邮件取出")])]),v._v(" "),_("h4",{attrs:{id:"如何判断邮箱是真的存在"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何判断邮箱是真的存在"}},[v._v("#")]),v._v(" 如何判断邮箱是真的存在")]),v._v(" "),_("p",[v._v("很多场景 (比如邮件营销) 下面我们需要判断我们要发送的邮箱地址是否真的存在, 这个时候我们可以利用 "),_("code",[v._v("SMTP")]),v._v(" 协议来检测:")]),v._v(" "),_("ol",[_("li",[v._v("查找邮箱域名对应的 "),_("code",[v._v("SMTP")]),v._v(" 服务器地址")]),v._v(" "),_("li",[v._v("尝试与服务器建立连接")]),v._v(" "),_("li",[v._v("连接成功后尝试向需要验证的邮箱发送邮件")]),v._v(" "),_("li",[v._v("根据返回结果判定邮箱地址的真实性")])]),v._v(" "),_("blockquote",[_("p",[v._v("小贴士")])]),v._v(" "),_("p",[_("a",{attrs:{href:"https://verify-email.org/",target:"_blank",rel:"noopener noreferrer"}},[v._v("verify-email"),_("OutboundLink")],1),v._v(" (英文网站)")]),v._v(" "),_("p",[_("a",{attrs:{href:"http://tool.chacuo.net/mailverify",target:"_blank",rel:"noopener noreferrer"}},[v._v("检测邮箱地址真实性、邮件地址真实性检查、Email地址检查 "),_("OutboundLink")],1),v._v(" (无需登录即可使用)")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://www.emailcamel.com/",target:"_blank",rel:"noopener noreferrer"}},[v._v("EmailCamel "),_("OutboundLink")],1),v._v("(需要登录才能使用)")]),v._v(" "),_("h3",{attrs:{id:"pop3-imap-邮件接收协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pop3-imap-邮件接收协议"}},[v._v("#")]),v._v(" POP3 / IMAP : 邮件接收协议")]),v._v(" "),_("p",[v._v("这两个协议均是 "),_("strong",[v._v("负责邮件接收的协议")])]),v._v(" "),_("p",[_("strong",[_("code",[v._v("SMTP")]),v._v(" 协议只负责邮件的发送, "),_("code",[v._v("POP3 / IMAP")]),v._v(" 协议才负责邮件的接收")])]),v._v(" "),_("p",[_("code",[v._v("IMAP")]),v._v(" 协议相比于 "),_("code",[v._v("POP3")]),v._v(" 协议更新一点儿")]),v._v(" "),_("h3",{attrs:{id:"ftp-文件传输协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ftp-文件传输协议"}},[v._v("#")]),v._v(" FTP : 文件传输协议")]),v._v(" "),_("p",[_("code",[v._v("FTP")]),v._v(" 协议主要提供文件传输服务, 基于 "),_("code",[v._v("TCP")]),v._v(" 实现可靠的传输.")]),v._v(" "),_("p",[v._v("使用 "),_("code",[v._v("FTP")]),v._v(" 传输文件的好处是可以屏蔽操作系统和文件存储方式")]),v._v(" "),_("blockquote",[_("p",[v._v("小贴士")])]),v._v(" "),_("p",[_("code",[v._v("FTP")]),v._v(" 的独特的优势同时也是与其它客户服务器程序最大的不同点就在于它在两台通信的主机之间使用了两条 "),_("code",[v._v("TCP")]),v._v(" 连接 (其它客户服务器应用程序一般只有一条 "),_("code",[v._v("TCP")]),v._v(" 连接) :")]),v._v(" "),_("ol",[_("li",[v._v("控制连接 : 用于传送控制信息 (命令和响应)")]),v._v(" "),_("li",[v._v("数据连接 : 用于数据传送")])]),v._v(" "),_("p",[v._v("这种将命令和数据分开传送的思想大大提高了 "),_("code",[v._v("FTP")]),v._v(" 的效率")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101548987.png",alt:"FTP工作过程"}})]),v._v(" "),_("h3",{attrs:{id:"telnet-远程登录协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#telnet-远程登录协议"}},[v._v("#")]),v._v(" Telnet : 远程登录协议")]),v._v(" "),_("p",[_("code",[v._v("Telnet")]),v._v(" 协议通过一个终端登录到其他服务器, 建立在 "),_("code",[v._v("TCP")]),v._v(" 协议之上")]),v._v(" "),_("p",[_("code",[v._v("Telnet")]),v._v(" 协议最大的缺点之一是 "),_("strong",[v._v("所有数据 (包括用户名和密码) 均以明文方式发送")])]),v._v(" "),_("h3",{attrs:{id:"ssh-安全的网络传输协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssh-安全的网络传输协议"}},[v._v("#")]),v._v(" SSH : 安全的网络传输协议")]),v._v(" "),_("p",[_("code",[v._v("SSH ( Secure Shell)")]),v._v("  是目前比较可靠, 专为远程登录会话和其他网络服务提供安全性的协议")]),v._v(" "),_("p",[v._v("利用 "),_("code",[v._v("SSH")]),v._v(" 协议可以有效防止远程管理过程中的信息泄露问题")]),v._v(" "),_("p",[_("code",[v._v("SSH")]),v._v(" 建立在 "),_("code",[v._v("TCP")]),v._v(" 协议之上")]),v._v(" "),_("h2",{attrs:{id:"tcp-三次握手和四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手和四次挥手"}},[v._v("#")]),v._v(" TCP 三次握手和四次挥手")]),v._v(" "),_("p",[v._v("为了准确无误地把数据送达目标处, "),_("code",[v._v("TCP")]),v._v(" 协议采用了三次握手策略")]),v._v(" "),_("h3",{attrs:{id:"tcp-三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手"}},[v._v("#")]),v._v(" TCP 三次握手")]),v._v(" "),_("blockquote",[_("p",[v._v("漫画图解")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101553237.png",alt:"TCP三次握手"}})]),v._v(" "),_("blockquote",[_("p",[v._v("简单示意图")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101553843.png",alt:"TCP三次握手"}})]),v._v(" "),_("ul",[_("li",[v._v("客户端 - 发送带有 "),_("code",[v._v("SYN")]),v._v(" 标志的数据包 - 一次握手 - 服务端")]),v._v(" "),_("li",[v._v("服务端 - 发送带有 "),_("code",[v._v("SYN/ACK")]),v._v(" 标志的数据包 - 二次握手 - 客户端")]),v._v(" "),_("li",[v._v("客户端 - 发送带有 "),_("code",[v._v("ACK")]),v._v(" 标志的数据包 - 三次握手 - 服务端")])]),v._v(" "),_("blockquote",[_("p",[v._v("详细示意图")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101555480.png",alt:"img"}})]),v._v(" "),_("h4",{attrs:{id:"为什么要三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要三次握手"}},[v._v("#")]),v._v(" 为什么要三次握手")]),v._v(" "),_("p",[_("strong",[v._v("三次握手的目的是建立可靠的通信信道, 说到通讯, 简单来说就是数据的发送与接收, 而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的")])]),v._v(" "),_("blockquote",[_("p",[v._v("第一次握手")])]),v._v(" "),_("p",[v._v("客户端 : 什么都不能确认")]),v._v(" "),_("p",[v._v("服务端 : 确认客户端发送正常, 服务端接收正常")]),v._v(" "),_("blockquote",[_("p",[v._v("第二次握手")])]),v._v(" "),_("p",[v._v("客户端 : 确认客户端发送, 接收正常, 服务端发送, 接收正常")]),v._v(" "),_("p",[v._v("服务端 : 确认客户端发送正常, 服务端接收正常")]),v._v(" "),_("blockquote",[_("p",[v._v("第三次握手")])]),v._v(" "),_("p",[v._v("客户端 : 确认客户端发送, 接收正常, 服务端发送, 接收正常")]),v._v(" "),_("p",[v._v("服务端 : 确认客户端发送, 接收正常, 服务端发送, 接收正常")]),v._v(" "),_("h4",{attrs:{id:"第二次握手传回了-ack-为什么还要传回-syn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二次握手传回了-ack-为什么还要传回-syn"}},[v._v("#")]),v._v(" 第二次握手传回了 "),_("code",[v._v("ACK")]),v._v(", 为什么还要传回 "),_("code",[v._v("SYN")]),v._v(" ?")]),v._v(" "),_("p",[v._v("服务端传回客户端所发送的 "),_("code",[v._v("ACK")]),v._v(" 是为了告诉客户端, 我接收到的信息确实就是你所发送的信号了, 这 "),_("strong",[v._v("表明从客户端到服务端的通信是正常的")])]),v._v(" "),_("p",[v._v("回传 "),_("code",[v._v("SYN")]),v._v(" 则是 "),_("strong",[v._v("为了建立并确认从服务端到客户端的通信")])]),v._v(" "),_("h3",{attrs:{id:"tcp-四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-四次挥手"}},[v._v("#")]),v._v(" TCP 四次挥手")]),v._v(" "),_("blockquote",[_("p",[v._v("简单示意图")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101609802.png",alt:"TCP四次挥手"}})]),v._v(" "),_("p",[v._v("断开一个 "),_("code",[v._v("TCP")]),v._v(" 连接则需要 "),_("strong",[v._v("四次挥手")]),v._v(" :")]),v._v(" "),_("ul",[_("li",[v._v("客户端 - 发送一个 "),_("code",[v._v("FIN")]),v._v(", 用来 "),_("strong",[v._v("关闭客户端到服务端的数据传送")])]),v._v(" "),_("li",[v._v("服务端 - 收到这个 "),_("code",[v._v("FIN")]),v._v(", 发回一个 "),_("code",[v._v("ACK")]),v._v(", 确认序号为收到的序号加一. 和 "),_("code",[v._v("SYN")]),v._v(" 一样, 一个 "),_("code",[v._v("FIN")]),v._v(" 会占用一个序号")]),v._v(" "),_("li",[v._v("服务端 - 关闭与客户端的连接, 发送一个 "),_("code",[v._v("FIN")]),v._v(" 给客户端")]),v._v(" "),_("li",[v._v("客户端 - 发回 "),_("code",[v._v("ACK")]),v._v(" 报文确认, 并将确认序号设置为收到序号加一")])]),v._v(" "),_("p",[v._v("任何一方都可以在数据传送结束后发出连接释放的通知, 待对方确认后进入半关闭状态. 当另一方也没有数据再发送的时候, 则发出连接释放通知, 对方确认后就完全关闭了 "),_("code",[v._v("TCP")]),v._v(" 连接")]),v._v(" "),_("h3",{attrs:{id:"动图详解-tcp-三次握手与四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动图详解-tcp-三次握手与四次挥手"}},[v._v("#")]),v._v(" 动图详解 TCP 三次握手与四次挥手")]),v._v(" "),_("blockquote",[_("p",[v._v("三次握手动图")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101614900.gif",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101614893.png",alt:"三次握手"}})]),v._v(" "),_("blockquote",[_("p",[v._v("四次挥手动图")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101615607.gif",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101615398.png",alt:"四次挥手"}})]),v._v(" "),_("h3",{attrs:{id:"详解-tcp-报文首部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#详解-tcp-报文首部"}},[v._v("#")]),v._v(" 详解 TCP 报文首部")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("源端口和目的端口, 各占 2 个字节, 分别写入源端口和目的端口")])]),v._v(" "),_("li",[_("p",[v._v("序号, 占 4 个字节, "),_("strong",[_("code",[v._v("TCP")]),v._v(" 连接中传送的字节流中的每个字节都按顺序编号")]),v._v(". 例如, 一段报文的序号字段值是 301 , 而携带的数据共有 100 字段, 显然下一个文段 (如果还有的话) 的数据序号应该从 401 开始")])]),v._v(" "),_("li",[_("p",[v._v("确认号, 占 4 个字节, "),_("strong",[v._v("是期望收到对方下一个报文的第一个数据字节的序号")]),v._v(". 例如, B 收到了 A 发送过来的报文, 其序列号字段是 501, 而数据长度是 200 字节, 这 "),_("strong",[v._v("表明 B 正确的收到了 A 发送的到序号 700 为止的数据")]),v._v(". 因此, B 期望收到 A 的下一个数据序号是 701, 于是 B 在发送给 A 的确认报文段中把确认号置为701")])]),v._v(" "),_("li",[_("p",[v._v("数据偏移, 占 4 位, 它指出 "),_("code",[v._v("TCP")]),v._v(" 报文的数据距离 "),_("code",[v._v("TCP")]),v._v(" 报文段的起始处有多远")])]),v._v(" "),_("li",[_("p",[v._v("保留, 占 6 位, 保留今后使用, 但目前应都位 0")])]),v._v(" "),_("li",[_("p",[v._v("紧急 "),_("code",[v._v("URG")]),v._v(", 当"),_("code",[v._v("URG = 1")]),v._v(", 表明紧急指针字段有效. 告诉系统此报文段中有紧急数据")])]),v._v(" "),_("li",[_("p",[v._v("确认 "),_("code",[v._v("ACK")]),v._v(", 仅当"),_("code",[v._v("ACK = 1")]),v._v("时, 确认号字段才有效. "),_("code",[v._v("TCP")]),v._v(" 规定, 在连接建立后所有报文的传输都必须把 ACK 置 1")])]),v._v(" "),_("li",[_("p",[v._v("推送 "),_("code",[v._v("PSH")]),v._v(", 当两个应用进程进行交互式通信时, 有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应, 这时候就将 "),_("code",[v._v("PSH = 1")])])]),v._v(" "),_("li",[_("p",[v._v("复位 "),_("code",[v._v("RST")]),v._v(", 当"),_("code",[v._v("RST = 1")]),v._v(", 表明 "),_("code",[v._v("TCP")]),v._v(" 连接中出现严重差错, 必须释放连接, 然后再重新建立")])]),v._v(" "),_("li",[_("p",[v._v("连接同步 "),_("code",[v._v("SYN")]),v._v(", 在连接建立时用来同步序号. 当 "),_("code",[v._v("SYN = 1, ACK = 0")]),v._v(", 表明是连接请求报文, 若同意连接, 则响应报文中应该使 "),_("code",[v._v("SYN = 1, ACK = 1")])])]),v._v(" "),_("li",[_("p",[v._v("终止 "),_("code",[v._v("FIN")]),v._v(", 用来释放连接. 当 "),_("code",[v._v("FIN = 1")]),v._v(", 表明此报文的发送方的数据已经发送完毕, 并且要求释放")])]),v._v(" "),_("li",[_("p",[v._v("窗口, 占 2 字节, 指的是通知接收方, 发送本报文你需要有多大的空间来接受")])]),v._v(" "),_("li",[_("p",[v._v("检验和, 占 2 字节, 校验首部和数据这两部分")])]),v._v(" "),_("li",[_("p",[v._v("紧急指针, 占 2 字节, 指出本报文段中的紧急数据的字节数")])]),v._v(" "),_("li",[_("p",[v._v("选项, 长度可变, 定义一些其他的可选的参数.")])])]),v._v(" "),_("h3",{attrs:{id:"为什么客户端最后还要等待-2msl"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么客户端最后还要等待-2msl"}},[v._v("#")]),v._v(" 为什么客户端最后还要等待 2MSL？")]),v._v(" "),_("p",[_("code",[v._v("MSL (Maximum Segment Lifetime)")]),v._v(", "),_("code",[v._v("TCP")]),v._v(" 允许不同的实现可以设置不同的 MSL 值")]),v._v(" "),_("ol",[_("li",[v._v("保证客户端发送的最后一个 "),_("code",[v._v("ACK")]),v._v(" 报文能够到达服务器, 因为这个 "),_("code",[v._v("ACK")]),v._v(" 报文可能丢失, 站在服务器的角度看来, 我已经发送了 "),_("code",[v._v("FIN + ACK")]),v._v("报文请求断开了, 客户端还没有给我回应, 应该是我发送的请求断开报文它没有收到, 于是服务器又会重新发送一次, 而客户端就能在这个 "),_("code",[v._v("2MSL")]),v._v(" 时间段内收到这个重传的报文, 接着给出回应报文, 并且会重启 "),_("code",[v._v("2MSL")]),v._v(" 计时器")]),v._v(" "),_("li",[v._v('防止类似与 "三次握手" 中提到了的 "已经失效的连接请求报文段" 出现在本连接中. 客户端发送完最后一个确认报文后, 在这个 '),_("code",[v._v("2MSL")]),v._v(" 时间中, 就可以使本连接持续的时间内所产生的所有报文段都从网络中消失. 这样新的连接中不会出现旧连接的请求报文")])]),v._v(" "),_("h3",{attrs:{id:"详解-tcp-三次握手与四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#详解-tcp-三次握手与四次挥手"}},[v._v("#")]),v._v(" 详解 TCP 三次握手与四次挥手")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://blog.csdn.net/qzcsu/article/details/72861891",target:"_blank",rel:"noopener noreferrer"}},[v._v("两张动图-彻底明白TCP的三次握手与四次挥手"),_("OutboundLink")],1)]),v._v(" "),_("h2",{attrs:{id:"tcp-与-udp-协议的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-与-udp-协议的区别"}},[v._v("#")]),v._v(" TCP 与 UDP 协议的区别")]),v._v(" "),_("blockquote",[_("p",[v._v("图示")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101632347.jpeg",alt:"TCP、UDP协议的区别"}})]),v._v(" "),_("p",[_("code",[v._v("UDP")]),v._v(" 在传送数据之前不需要先建立连接, 远地主机在收到 "),_("code",[v._v("UDP")]),v._v(" 报文后, 不需要给出任何确认. 虽然 "),_("code",[v._v("UDP")]),v._v(" 不提供可靠交付, 但在某些情况下 "),_("code",[v._v("UDP")]),v._v(" 却是一种最有效的工作方式 (一般用于即时通信), 比如 : QQ 语音、 QQ 视频 、直播等等")]),v._v(" "),_("p",[_("code",[v._v("TCP")]),v._v(" 提供面向连接的服务. 在传送数据之前必须先建立连接, 数据传送结束后要释放连接. "),_("code",[v._v("TCP")]),v._v(" 不提供广播或多播服务. 由于 "),_("code",[v._v("TCP")]),v._v(" 要提供可靠的, 面向连接的传输服务 ("),_("code",[v._v("TCP")]),v._v(" 的可靠体现在 "),_("code",[v._v("TCP")]),v._v(" 在传递数据之前, 会有三次握手来建立连接, 而且在数据传递时, 有确认、窗口、重传、拥塞控制机制, 在数据传完后, 还会断开连接用来节约系统资源), 这难以避免增加了许多开销, 如确认, 流量控制, 计时器以及连接管理等. 这不仅使协议数据单元的首部增大很多, 还要占用许多处理机资源. "),_("code",[v._v("TCP")]),v._v(" 一般用于文件传输、发送和接收邮件、远程登录等场景")]),v._v(" "),_("h2",{attrs:{id:"tcp-协议如何保证可靠传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议如何保证可靠传输"}},[v._v("#")]),v._v(" TCP 协议如何保证可靠传输")]),v._v(" "),_("ol",[_("li",[v._v("应用数据被分割成 "),_("code",[v._v("TCP")]),v._v(" 认为最适合发送的数据块")]),v._v(" "),_("li",[_("code",[v._v("TCP")]),v._v(" 给发送的每一个包进行编号, 接收方对数据包进行排序, 把有序数据传送给应用层")]),v._v(" "),_("li",[_("strong",[v._v("校验和")]),v._v(" : "),_("code",[v._v("TCP")]),v._v(" 将保持它首部和数据的校验和. 这是一个端到端的检验和, 目的是检测数据在传输过程中的任何变化. 如果收到段的检验和有差错, "),_("code",[v._v("TCP")]),v._v(" 将丢弃这个报文段和不确认收到此报文段")]),v._v(" "),_("li",[_("code",[v._v("TCP")]),v._v(" 的接收端会丢弃重复的数据")]),v._v(" "),_("li",[_("strong",[v._v("流量控制")]),v._v(" : "),_("code",[v._v("TCP")]),v._v(" 连接的每一方都有固定大小的缓冲空间, "),_("code",[v._v("TCP")]),v._v(" 的接收端只允许发送端发送接收端缓冲区能接纳的数据. 当接收方来不及处理发送方的数据, 能提示发送方降低发送的速率, 防止包丢失. "),_("code",[v._v("TCP")]),v._v(" 使用的流量控制协议是可变大小的滑动窗口协议. (利用滑动窗口实现)")]),v._v(" "),_("li",[_("strong",[v._v("拥塞控制")]),v._v(" : 当网络拥塞时, 减少数据的发送")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("ARQ")]),v._v(" 协议")]),v._v(" : 也是为了实现可靠传输的, 它的基本原理就是每发完一个分组就停止发送, 等待对方确认. 在收到确认后再发下一个分组")]),v._v(" "),_("li",[_("strong",[v._v("超时重传")]),v._v(" : 当 "),_("code",[v._v("TCP")]),v._v(" 发出一个段后, 它启动一个定时器, 等待目的端确认收到这个报文段. 如果不能及时收到一个确认, 将重发这个报文段")])]),v._v(" "),_("h3",{attrs:{id:"arq-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arq-协议"}},[v._v("#")]),v._v(" ARQ 协议")]),v._v(" "),_("p",[_("strong",[v._v("自动重传请求")]),v._v(" ("),_("code",[v._v("Automatic Repeat-reQuest")]),v._v(", "),_("code",[v._v("ARQ")]),v._v(") 是 "),_("code",[v._v("OSI")]),v._v(" 模型中数据链路层和传输层的错误纠正协议之一. 它通过使用确认和超时这两个机制, 在不可靠服务的基础上实现可靠的信息传输. 如果发送方在发送后一段时间之内没有收到确认帧, 它通常会重新发送. "),_("code",[v._v("ARQ")]),v._v(" 包括 "),_("strong",[v._v("停止等待 "),_("code",[v._v("ARQ")]),v._v(" 协议")]),v._v(" 和 "),_("strong",[v._v("连续 "),_("code",[v._v("ARQ")]),v._v(" 协议")])]),v._v(" "),_("h4",{attrs:{id:"停止等待-arq-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#停止等待-arq-协议"}},[v._v("#")]),v._v(" 停止等待 ARQ 协议")]),v._v(" "),_("p",[v._v("停止等待协议是为了实现可靠传输的, 它的基本原理就是每发完一个分组就停止发送, 等待对方确认 (回复 "),_("code",[v._v("ACK")]),v._v("). 如果过了一段时间 (超时时间后), 还是没有收到 "),_("code",[v._v("ACK")]),v._v(" 确认, 说明没有发送成功, 需要重新发送, 直到收到确认后再发下一个分组")]),v._v(" "),_("p",[v._v("在停止等待协议中, 若接收方收到重复分组, 就丢弃该分组, 但同时还要发送确认")]),v._v(" "),_("blockquote",[_("p",[v._v("优点")])]),v._v(" "),_("ul",[_("li",[v._v("简单")])]),v._v(" "),_("blockquote",[_("p",[v._v("缺点")])]),v._v(" "),_("ul",[_("li",[v._v("信道利用率低, 等待时间长")])]),v._v(" "),_("h5",{attrs:{id:"无差错情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无差错情况"}},[v._v("#")]),v._v(" 无差错情况")]),v._v(" "),_("p",[v._v("发送方发送分组, 接收方在规定时间内收到, 并且回复确认. 发送方再次发送")]),v._v(" "),_("h5",{attrs:{id:"出现差错情况-超时重传"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#出现差错情况-超时重传"}},[v._v("#")]),v._v(" 出现差错情况 (超时重传)")]),v._v(" "),_("p",[v._v("停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认, 就重传前面发送过的分组 (认为刚才发送过的分组丢失了). 因此每发送完一个分组需要设置一个超时计时器, 其重传时间应比数据在分组传输的平均往返时间更长一些. 这种自动重传方式常称为 "),_("strong",[v._v("自动重传请求 "),_("code",[v._v("ARQ")])]),v._v(" .")]),v._v(" "),_("p",[v._v("另外在停止等待协议中若收到重复分组, 就丢弃该分组, 但同时还要发送确认. "),_("strong",[v._v("连续 "),_("code",[v._v("ARQ")]),v._v(" 协议")]),v._v(" 可提高信道利用率. 发送维持一个发送窗口, 凡位于发送窗口内的分组可连续发送出去, 而不需要等待对方确认. 接收方一般采用累积确认, 对按序到达的最后一个分组发送确认, 表明到这个分组位置的所有分组都已经正确收到了")]),v._v(" "),_("h6",{attrs:{id:"确认丢失和确认迟到"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#确认丢失和确认迟到"}},[v._v("#")]),v._v(" 确认丢失和确认迟到")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("确认丢失")]),v._v(" : 确认消息在传输过程丢失. 当 A 发送 M1 消息, B 收到后, B 向 A 发送了一个 M1 确认消息, 但却在传输过程中丢失. 而 A 并不知道, 在超时计时过后, A 重传 M1 消息, B 再次收到该消息后采取以下两点措施:\n"),_("ul",[_("li",[v._v("丢弃这个重复的 M1 消息, 不向上层交付")]),v._v(" "),_("li",[v._v("向 A 发送确认消息 (不会认为已经发送过了, 就不再发送. A 能重传, 就证明 B 的确认消息丢失)")])])]),v._v(" "),_("li",[_("strong",[v._v("确认迟到")]),v._v(" : 确认消息在传输过程中迟到. A 发送 M1 消息, B 收到并发送确认. 在超时时间内没有收到确认消息, A 重传 M1 消息, B 仍然收到并继续发送确认消息 (B 收到了 2 份 M1). 此时 A 收到了 B 第二次发送的确认消息. 接着发送其他数据. 过了一会, A 收到了 B 第一次发送的对 M1 的确认消息 (A 也收到了 2 份确认消息). 处理如下 :\n"),_("ul",[_("li",[v._v("A 收到重复的确认后, 直接丢弃")]),v._v(" "),_("li",[v._v("B 收到重复的 M1 后, 也直接丢弃重复的 M1")])])])]),v._v(" "),_("h4",{attrs:{id:"连续-arq-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连续-arq-协议"}},[v._v("#")]),v._v(" 连续 ARQ 协议")]),v._v(" "),_("p",[v._v("连续 "),_("code",[v._v("ARQ")]),v._v(" 协议可提高信道利用率. 发送方维持一个发送窗口, 凡位于发送窗口内的分组可以连续发送出去, 而不需要等待对方确认. 接收方一般采用累积确认, 对按序到达的最后一个分组发送确认, 表明到这个分组为止的所有分组都已经正确收到了")]),v._v(" "),_("blockquote",[_("p",[v._v("优点")])]),v._v(" "),_("ul",[_("li",[v._v("信道利用率高")]),v._v(" "),_("li",[v._v("容易实现")]),v._v(" "),_("li",[v._v("即使确认丢失, 也不必重传")])]),v._v(" "),_("blockquote",[_("p",[v._v("缺点")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("不能向发送方反映出接收方已经正确收到的所有分组的信息.")]),v._v(" "),_("p",[v._v("比如 : 发送方发送了 5 条消息, 中间第三条丢失 (3 号), 这时接收方只能对前两个发送确认. 发送方无法知道后三个分组的下落, 而只好把后三个全部重传一次. 这也叫 "),_("code",[v._v("Go-Back-N")]),v._v(" (回退 N), 表示需要退回来重传已经发送过的 N 个消息")])])]),v._v(" "),_("h3",{attrs:{id:"滑动窗口与流量控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口与流量控制"}},[v._v("#")]),v._v(" 滑动窗口与流量控制")]),v._v(" "),_("p",[_("strong",[_("code",[v._v("TCP")]),v._v(" 利用滑动窗口实现流量控制. 流量控制是为了控制发送方发送速率, 保证接收方来得及接收.")])]),v._v(" "),_("p",[v._v("接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小, 从而影响发送方的发送速率. 将窗口字段设置为 0, 则发送方不能发送数据")]),v._v(" "),_("h3",{attrs:{id:"拥塞控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[v._v("#")]),v._v(" 拥塞控制")]),v._v(" "),_("p",[v._v("在某段时间, 若对网络中某一资源的需求超过了该资源所能提供的可用部分, 网络的性能就要变坏. 这种情况就叫拥塞.")]),v._v(" "),_("p",[v._v("拥塞控制就是 "),_("strong",[v._v("为了防止过多的数据注入到网络中")]),v._v(", 这样就 "),_("strong",[v._v("可以使网络中的路由器或链路不致过载")]),v._v(".")]),v._v(" "),_("p",[v._v("拥塞控制所要做的都有一个前提, 就是 "),_("strong",[v._v("网络能够承受现有的网络负荷")]),v._v(".")]),v._v(" "),_("p",[_("strong",[v._v("拥塞控制是一个全局性的过程, 涉及到所有的主机, 所有的路由器, 以及与降低网络传输性能有关的所有因素")]),v._v(". 相反, 流量控制往往是点对点通信量的控制, 是个端到端的问题. "),_("strong",[v._v("流量控制所要做到的就是抑制发送端发送数据的速率, 以便使接收端来得及接收.")])]),v._v(" "),_("p",[v._v("为了进行拥塞控制, "),_("code",[v._v("TCP")]),v._v(" 发送方要维持一个 "),_("strong",[v._v("拥塞窗口("),_("code",[v._v("cwnd")]),v._v(")")]),v._v(" 的状态变量. 拥塞控制窗口的大小取决于网络的拥塞程度, 并且动态变化. 发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个.")]),v._v(" "),_("p",[_("code",[v._v("TCP")]),v._v(" 的拥塞控制采用了四种算法, 即 "),_("strong",[v._v("慢开始")]),v._v(" 、 "),_("strong",[v._v("拥塞避免")]),v._v(" 、"),_("strong",[v._v("快重传")]),v._v(" 和 "),_("strong",[v._v("快恢复")]),v._v(". 在网络层也可以使路由器采用适当的分组丢弃策略 (如主动队列管理 "),_("code",[v._v("AQM")]),v._v(") , 以减少网络拥塞的发生.")]),v._v(" "),_("ul",[_("li",[v._v("**慢开始 : ** 慢开始算法的思路是当主机开始发送数据时, 如果立即把大量数据字节注入到网络, 那么可能会引起网络阻塞, 因为现在还不知道网络的符合情况. 经验表明, 较好的方法是先探测一下, 即由小到大逐渐增大发送窗口, 也就是由小到大逐渐增大拥塞窗口数值. "),_("code",[v._v("cwnd")]),v._v(" 初始值为 1, 每经过一个传播轮次, "),_("code",[v._v("cwnd")]),v._v(" 加倍.")]),v._v(" "),_("li",[v._v("**拥塞避免 : ** 拥塞避免算法的思路是让拥塞窗口 "),_("code",[v._v("cwnd")]),v._v(" 缓慢增大, 即每经过一个往返时间 "),_("code",[v._v("RTT")]),v._v(" 就把发送方的 "),_("code",[v._v("cwnd")]),v._v(" 加 1.")]),v._v(" "),_("li",[v._v("**快重传与快恢复 : ** 在 "),_("code",[v._v("TCP/IP")]),v._v(" 中, 快速重传和恢复 ("),_("code",[v._v("fast retransmit and recovery")]),v._v(", "),_("code",[v._v("FRR")]),v._v(") 是一种拥塞控制算法, 它能快速恢复丢失的数据包. 没有 FRR, 如果数据包丢失了, "),_("code",[v._v("TCP")]),v._v(" 将会使用定时器来要求传输暂停. 在暂停的这段时间内, 没有新的或复制的数据包被发送. 有了 "),_("code",[v._v("FRR")]),v._v(", 如果接收机接收到一个不按顺序的数据段, 它会立即给发送机发送一个重复确认. 如果发送机接收到三个重复确认, 它会假定确认件指出的数据段丢失了, 并立即重传这些丢失的数据段. 有了 "),_("code",[v._v("FRR")]),v._v(", 就不会因为重传时要求的暂停被耽误. 当有单独的数据包丢失时, 快速重传和恢复 ("),_("code",[v._v("FRR")]),v._v(") 能最有效地工作. 当有多个数据信息包在某一段很短的时间内丢失时, 它则不能很有效地工作.")])]),v._v(" "),_("h2",{attrs:{id:"在浏览器中输入-url-地址-显示主页的过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#在浏览器中输入-url-地址-显示主页的过程"}},[v._v("#")]),v._v(" 在浏览器中输入 url 地址 ->> 显示主页的过程")]),v._v(" "),_("blockquote",[_("p",[v._v("图解")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101659621.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("小贴士")])]),v._v(" "),_("p",[v._v("上图有一个错误, 请注意, 是 "),_("code",[v._v("OSPF")]),v._v(" 不是 "),_("code",[v._v("OPSF")])]),v._v(" "),_("p",[_("code",[v._v("OSPF")]),v._v("( "),_("code",[v._v("Open Shortest Path First")]),v._v(") 开放最短路径优先协议, 是由 "),_("code",[v._v("Internet")]),v._v(" 工程任务组开发的路由选择协议")]),v._v(" "),_("blockquote",[_("p",[v._v("过程")])]),v._v(" "),_("ol",[_("li",[_("code",[v._v("DNS")]),v._v(" 解析")]),v._v(" "),_("li",[_("code",[v._v("TCP")]),v._v(" 连接")]),v._v(" "),_("li",[v._v("发送 "),_("code",[v._v("HTTP")]),v._v(" 请求")]),v._v(" "),_("li",[v._v("服务器处理请求并返回 "),_("code",[v._v("HTTP")]),v._v(" 报文")]),v._v(" "),_("li",[v._v("浏览器解析渲染页面")]),v._v(" "),_("li",[v._v("连接结束")])]),v._v(" "),_("blockquote",[_("p",[v._v("详解")])]),v._v(" "),_("p",[_("a",{attrs:{href:"https://segmentfault.com/a/1190000006879700",target:"_blank",rel:"noopener noreferrer"}},[v._v("前端经典面试题: 从输入URL到页面加载发生了什么？"),_("OutboundLink")],1)]),v._v(" "),_("h2",{attrs:{id:"状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[v._v("#")]),v._v(" 状态码")]),v._v(" "),_("blockquote",[_("p",[v._v("图示")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101704665.png",alt:"状态码"}})]),v._v(" "),_("h3",{attrs:{id:"_1xx-informational-信息性状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1xx-informational-信息性状态码"}},[v._v("#")]),v._v(" 1xx Informational (信息性状态码)")]),v._v(" "),_("h3",{attrs:{id:"_2xx-success-成功状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2xx-success-成功状态码"}},[v._v("#")]),v._v(" 2xx Success (成功状态码)")]),v._v(" "),_("ul",[_("li",[v._v("200 OK : 请求被成功处理")]),v._v(" "),_("li",[v._v("201 Create : 请求被成功处理并且在服务端创建了一个新的资源")]),v._v(" "),_("li",[v._v("202 Accept : 服务端已经接收到了请求, 但是还未处理")]),v._v(" "),_("li",[v._v("204 No Content : 服务端已经成功处理了请求, 但是没有返回任何内容")])]),v._v(" "),_("h3",{attrs:{id:"_3xx-redirection-重定向状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3xx-redirection-重定向状态码"}},[v._v("#")]),v._v(" 3xx Redirection (重定向状态码)")]),v._v(" "),_("ul",[_("li",[v._v("301 Moved Permanently : 资源被永久重定向了")]),v._v(" "),_("li",[v._v("302 Found : 资源被临时重定向了")])]),v._v(" "),_("h3",{attrs:{id:"_4xx-client-error-客户端错误状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4xx-client-error-客户端错误状态码"}},[v._v("#")]),v._v(" 4xx Client Error (客户端错误状态码)")]),v._v(" "),_("ul",[_("li",[v._v("400 Bad Request : 发送的 "),_("code",[v._v("HTTP")]),v._v(" 请求存在问题")]),v._v(" "),_("li",[v._v("401 Unauthorized : 未认证却请求需要认证之后才能访问的资源")]),v._v(" "),_("li",[v._v("403 Forbidden : 直接拒绝 "),_("code",[v._v("HTTP")]),v._v(" 请求, 不处理")]),v._v(" "),_("li",[v._v("404 Not Found : 你请求的资源未在服务端找到")]),v._v(" "),_("li",[v._v("409 Conflict : 表示请求的资源与服务端当前的存状态在冲突, 请求无法被处理")])]),v._v(" "),_("h3",{attrs:{id:"_5xx-server-error"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5xx-server-error"}},[v._v("#")]),v._v(" 5xx Server Error")]),v._v(" "),_("ul",[_("li",[v._v("500 Internal Server Error : 服务端出问题了")]),v._v(" "),_("li",[v._v("502 Bad Gateway : 我们的网关将请求转发到服务端, 但是服务端返回的却是一个错误的响应")])]),v._v(" "),_("h2",{attrs:{id:"各种协议与-http-协议之间的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#各种协议与-http-协议之间的关系"}},[v._v("#")]),v._v(" 各种协议与 HTTP 协议之间的关系")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101710396.png",alt:"各种协议与HTTP协议之间的关系"}})]),v._v(" "),_("h2",{attrs:{id:"http-是不保存状态的协议-如何保存用户状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-是不保存状态的协议-如何保存用户状态"}},[v._v("#")]),v._v(" HTTP 是不保存状态的协议, 如何保存用户状态 ?")]),v._v(" "),_("p",[v._v("通过 "),_("code",[v._v("Session")])]),v._v(" "),_("p",[_("code",[v._v("Session")]),v._v(" 的主要作用就是通过服务端记录用户的状态")]),v._v(" "),_("p",[v._v("在服务端保存 "),_("code",[v._v("Session")]),v._v(" 的方法很多, 最常用的就是内存和数据库 (比如是使用内存数据库 "),_("code",[v._v("redis")]),v._v(" 保存). 既然 "),_("code",[v._v("Session")]),v._v(" 存放在服务器端, 那么我们如何实现 "),_("code",[v._v("Session")]),v._v(" 跟踪呢? 大部分情况下, 我们都是通过在 "),_("code",[v._v("Cookie")]),v._v(" 中附加一个 "),_("code",[v._v("Session ID")]),v._v(" 来方式来跟踪.")]),v._v(" "),_("blockquote",[_("p",[_("code",[v._v("Cookie")]),v._v(" 被禁用怎么办")])]),v._v(" "),_("p",[v._v("最常用的就是利用 "),_("code",[v._v("URL")]),v._v(" 重写把 "),_("code",[v._v("Session ID")]),v._v(" 直接附加在 "),_("code",[v._v("URL")]),v._v(" 路径的后面")]),v._v(" "),_("h2",{attrs:{id:"cookie-的作用是什么-和-session-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的作用是什么-和-session-有什么区别"}},[v._v("#")]),v._v(" Cookie 的作用是什么? 和 Session 有什么区别？")]),v._v(" "),_("p",[_("code",[v._v("Cookie")]),v._v(" 和 "),_("code",[v._v("Session")]),v._v(" 都是用来跟踪浏览器用户身份的会话方式, 但是两者的应用场景不太一样")]),v._v(" "),_("ul",[_("li",[_("strong",[_("code",[v._v("Cookie")]),v._v(" 一般用来保存用户信息")]),v._v(" "),_("ul",[_("li",[v._v("我们在 "),_("code",[v._v("Cookie")]),v._v(" 中保存已经登录过的用户信息, 下次访问网站的时候页面可以自动帮你把登录的一些基本信息给填了")]),v._v(" "),_("li",[v._v("一般的网站都会有保持登录, 也就是说下次你再访问网站的时候就不需要重新登录了, 这是因为用户登录的时候我们可以存放了一个 "),_("code",[v._v("Token")]),v._v(" 在 "),_("code",[v._v("Cookie")]),v._v(" 中, 下次登录的时候只需要根据 "),_("code",[v._v("Token")]),v._v(" 值来查找用户即可 (为了安全考虑, 重新登录一般要将 "),_("code",[v._v("Token")]),v._v(" 重写)")]),v._v(" "),_("li",[v._v("登录一次网站后访问网站其他页面不需要重新登录")])])]),v._v(" "),_("li",[_("strong",[_("code",[v._v("Session")]),v._v(" 的主要作用就是通过服务端记录用户的状态")])])]),v._v(" "),_("p",[_("code",[v._v("Cookie")]),v._v(" 数据保存在客户端 (浏览器端), "),_("code",[v._v("Session")]),v._v(" 数据保存在服务器端")]),v._v(" "),_("p",[_("code",[v._v("Cookie")]),v._v(" 存储在客户端中, 而 "),_("code",[v._v("Session")]),v._v(" 存储在服务器上, 相对来说 "),_("code",[v._v("Session")]),v._v(" 安全性更高. 如果要在 "),_("code",[v._v("Cookie")]),v._v(" 中存储一些敏感信息, 不要直接写入 "),_("code",[v._v("Cookie")]),v._v(" 中, 最好能将 "),_("code",[v._v("Cookie")]),v._v(" 信息加密, 然后使用到的时候再去服务器端解密")]),v._v(" "),_("h2",{attrs:{id:"uri-和-url-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#uri-和-url-的区别是什么"}},[v._v("#")]),v._v(" URI 和 URL 的区别是什么?")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("URI")]),v._v(" ("),_("code",[v._v("Uniform Resource Identifier")]),v._v(") 是统一资源标志符, 可以唯一标识一个资源")]),v._v(" "),_("li",[_("code",[v._v("URL")]),v._v(" ("),_("code",[v._v("Uniform Resource Locator")]),v._v(") 是统一资源定位符, 可以提供该资源的路径. 它是一种具体的 "),_("code",[v._v("URI")]),v._v(", 即 "),_("code",[v._v("URL")]),v._v(" 可以用来标识一个资源, 而且还指明了如何 "),_("code",[v._v("locate")]),v._v(" 这个资源")])]),v._v(" "),_("p",[_("code",[v._v("URI")]),v._v(" 的作用像身份证号一样, "),_("code",[v._v("URL")]),v._v(" 的作用更像家庭住址一样. "),_("code",[v._v("URL")]),v._v(" 是一种具体的 "),_("code",[v._v("URI")]),v._v(", 它不仅唯一标识资源, 而且还提供了定位该资源的信息")]),v._v(" "),_("h2",{attrs:{id:"osi-网络分层模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#osi-网络分层模型"}},[v._v("#")]),v._v(" OSI 网络分层模型")]),v._v(" "),_("p",[_("strong",[_("code",[v._v("OSI")]),v._v(" 七层模型")]),v._v(" 是国际标准化组织提出一个网络分层模型, 其大体结构以及每一层提供的功能如下图所示 :")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101718571.png",alt:"osi七层模型"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101719769.png",alt:"osi七层模型2"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101719487.png",alt:"img"}})]),v._v(" "),_("p",[v._v("每一层都专注做一件事情, 并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能, 这样传输层才知道把数据传输到哪里去")]),v._v(" "),_("p",[_("strong",[_("code",[v._v("OSI")]),v._v(" 的七层体系结构概念清楚, 理论也很完整, 但是它比较复杂而且不实用, 而且有些功能在多个层中重复出现")])]),v._v(" "),_("h2",{attrs:{id:"tcp-ip-四层模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-四层模型"}},[v._v("#")]),v._v(" TCP / IP 四层模型")]),v._v(" "),_("p",[_("strong",[_("code",[v._v("TCP / IP")]),v._v(" 四层模型")]),v._v(" 是目前被广泛采用的一种模型, 我们可以将 "),_("code",[v._v("TCP / IP")]),v._v(" 模型看作是 "),_("code",[v._v("OSI")]),v._v(" 七层模型的精简版本, 由以下 4 层组成 :")]),v._v(" "),_("ul",[_("li",[v._v("应用层")]),v._v(" "),_("li",[v._v("传输层")]),v._v(" "),_("li",[v._v("网络层")]),v._v(" "),_("li",[v._v("网络接口层")])]),v._v(" "),_("blockquote",[_("p",[v._v("TCP / IP 对应 OSI")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101721795.png",alt:"TCP-IP-4-model"}})]),v._v(" "),_("h3",{attrs:{id:"应用层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[v._v("#")]),v._v(" 应用层")]),v._v(" "),_("p",[_("strong",[v._v("应用层位于传输层之上, 主要提供两个终端设备上的应用程序之间信息交换的服务, 它定义了信息交换的格式, 消息会交给下一层传输层来传输")])]),v._v(" "),_("p",[v._v("应用层交互的数据单元称为报文")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101722216.png",alt:"img"}})]),v._v(" "),_("p",[v._v("应用层协议定义了网络通信规则, 对于不同的网络应用需要不同的应用层协议")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101721876.png",alt:"application-layer"}})]),v._v(" "),_("h3",{attrs:{id:"传输层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[v._v("#")]),v._v(" 传输层")]),v._v(" "),_("p",[_("strong",[v._v("传输层的主要任务就是负责向两台终端设备进程之间的通信提供通用的数据传输服务")])]),v._v(" "),_("p",[v._v('用进程利用该服务传送应用层报文. "通用的" 是指并不针对某一个特定的网络应用, 而是多种应用可以使用同一个运输层服务')]),v._v(" "),_("p",[_("strong",[v._v("运输层主要使用以下两种协议 :")])]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("传输控制协议 "),_("code",[v._v("TCP")])]),v._v(" ("),_("code",[v._v("Transmisson Control Protocol")]),v._v(") -- 提供 "),_("strong",[v._v("面向连接")]),v._v(" 的, **可靠的 **数据传输服务.")]),v._v(" "),_("li",[_("strong",[v._v("用户数据协议 "),_("code",[v._v("UDP")])]),v._v(" ("),_("code",[v._v("User Datagram Protocol")]),v._v(") -- 提供 "),_("strong",[v._v("无连接")]),v._v(" 的, 尽最大努力的数据传输服务 ("),_("strong",[v._v("不保证数据传输的可靠性")]),v._v(")")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101723228.png",alt:"transport-layer"}})]),v._v(" "),_("h3",{attrs:{id:"网络层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[v._v("#")]),v._v(" 网络层")]),v._v(" "),_("p",[_("strong",[v._v("网络层负责为分组交换网上的不同主机提供通信服务")])]),v._v(" "),_("p",[v._v("在 "),_("code",[v._v("TCP / IP")]),v._v(" 体系结构中, 由于网络层使用 "),_("code",[v._v("IP")]),v._v(" 协议, 因此分组也叫 "),_("code",[v._v("IP")]),v._v(" 数据报, 简称数据报")]),v._v(" "),_("p",[_("strong",[v._v("网络层的还有一个任务就是选择合适的路由, 使源主机运输层所传下来的分组, 能通过网络层中的路由器找到目的主机")])]),v._v(" "),_("blockquote",[_("p",[v._v("小贴士")])]),v._v(" "),_("p",[_("strong",[v._v('不要把运输层的 "用户数据报 '),_("code",[v._v("UDP")]),v._v('" 和网络层的 "'),_("code",[v._v("IP")]),v._v(' 数据报" 弄混')])]),v._v(" "),_("p",[v._v("互联网是由大量的异构("),_("code",[v._v("heterogeneous")]),v._v(") 网络通过路由器("),_("code",[v._v("router")]),v._v(") 相互连接起来的. 互联网使用的网络层协议是无连接的网际协议("),_("code",[v._v("Intert Prococol")]),v._v(") 和许多路由选择协议, 因此互联网的网络层也叫做 "),_("strong",[v._v("网际层")]),v._v(" 或 "),_("strong",[v._v("IP 层")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101726372.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"网络接口层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络接口层"}},[v._v("#")]),v._v(" 网络接口层")]),v._v(" "),_("p",[v._v("我们可以把网络接口层看作是数据链路层和物理层的合体")]),v._v(" "),_("ol",[_("li",[v._v("数据链路层 ("),_("code",[v._v("data link layer")]),v._v(")通常简称为链路层 (两台主机之间的数据传输, 总是在一段一段的链路上传送的). **数据链路层的作用是将网络层交下来的 "),_("code",[v._v("IP")]),v._v(" 数据报组装成帧, 在两个相邻节点间的链路上传送帧. 每一帧包括数据和必要的控制信息 (如同步信息, 地址信息, 差错控制等) **")]),v._v(" "),_("li",[_("strong",[v._v("物理层的作用是实现相邻计算机节点之间比特流的透明传送, 尽可能屏蔽掉具体传输介质和物理设备的差异")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101727018.png",alt:"network-interface-layer"}})]),v._v(" "),_("h2",{attrs:{id:"http-vs-https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-vs-https"}},[v._v("#")]),v._v(" HTTP vs HTTPS")]),v._v(" "),_("h3",{attrs:{id:"http-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议"}},[v._v("#")]),v._v(" HTTP 协议")]),v._v(" "),_("h4",{attrs:{id:"http-协议介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议介绍"}},[v._v("#")]),v._v(" HTTP 协议介绍")]),v._v(" "),_("p",[_("code",[v._v("HTTP")]),v._v(" 协议, 全称超文本传输协议 ("),_("code",[v._v("Hypertext Transfer Protocol")]),v._v(") . 顾名思义, "),_("code",[v._v("HTTP")]),v._v(" 协议就是用来规范超文本的传输")]),v._v(" "),_("p",[v._v("超文本, 也就是网络上的包括文本在内的各式各样的消息, 具体来说, 主要是来规范浏览器和服务器端的行为的")]),v._v(" "),_("p",[v._v("并且, "),_("code",[v._v("HTTP")]),v._v(" 是一个无状态 ("),_("code",[v._v("stateless")]),v._v(") 协议, 也就是说服务器不维护任何有关客户端过去所发请求的消息. 这其实是一种懒政, 有状态协议会更加复杂, 需要维护状态 (历史信息) , 而且如果客户或服务器失效, 会产生状态的不一致, 解决这种不一致的代价更高")]),v._v(" "),_("h4",{attrs:{id:"http-协议通信过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议通信过程"}},[v._v("#")]),v._v(" HTTP 协议通信过程")]),v._v(" "),_("p",[_("code",[v._v("HTTP")]),v._v(" 是应用层协议, 它以 "),_("code",[v._v("TCP")]),v._v(" (传输层) 作为底层协议, 默认端口为 80. 通信过程主要如下 :")]),v._v(" "),_("ol",[_("li",[v._v("服务器在 80 端口等待客户的请求.")]),v._v(" "),_("li",[v._v("浏览器发起到服务器的 "),_("code",[v._v("TCP")]),v._v(" 连接 (创建套接字 "),_("code",[v._v("Socket")]),v._v(") .")]),v._v(" "),_("li",[v._v("服务器接收来自浏览器的 "),_("code",[v._v("TCP")]),v._v(" 连接.")]),v._v(" "),_("li",[v._v("浏览器 ("),_("code",[v._v("HTTP")]),v._v(" 客户端) 与 "),_("code",[v._v("Web")]),v._v(" 服务器 ("),_("code",[v._v("HTTP")]),v._v(" 服务器) 交换 "),_("code",[v._v("HTTP")]),v._v(" 消息.")]),v._v(" "),_("li",[v._v("关闭 "),_("code",[v._v("TCP")]),v._v(" 连接.")])]),v._v(" "),_("h4",{attrs:{id:"htpp-协议优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#htpp-协议优点"}},[v._v("#")]),v._v(" HTPP 协议优点")]),v._v(" "),_("ul",[_("li",[v._v("扩展性强")]),v._v(" "),_("li",[v._v("速度快")]),v._v(" "),_("li",[v._v("跨平台支持性好")])]),v._v(" "),_("h3",{attrs:{id:"https-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-协议"}},[v._v("#")]),v._v(" HTTPS 协议")]),v._v(" "),_("h4",{attrs:{id:"https-协议介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-协议介绍"}},[v._v("#")]),v._v(" HTTPS 协议介绍")]),v._v(" "),_("p",[_("code",[v._v("HTTPS")]),v._v(" 协议 ("),_("code",[v._v("Hyper Text Transfer Protocol Secure")]),v._v(") , 是 "),_("code",[v._v("HTTP")]),v._v(" 的加强安全版本. "),_("code",[v._v("HTTPS")]),v._v(" 是基于 "),_("code",[v._v("HTTP")]),v._v(" 的, 也是用 "),_("code",[v._v("TCP")]),v._v(" 作为底层协议, 并额外使用 "),_("code",[v._v("SSL/TLS")]),v._v(" 协议用作加密和安全认证. 默认端口号是 443.")]),v._v(" "),_("p",[_("code",[v._v("HTTPS")]),v._v(" 协议中, "),_("code",[v._v("SSL")]),v._v(" 通道通常使用基于密钥的加密算法, 密钥长度通常是 40 比特或 128 比特.")]),v._v(" "),_("h4",{attrs:{id:"https-协议优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-协议优点"}},[v._v("#")]),v._v(" HTTPS 协议优点")]),v._v(" "),_("ul",[_("li",[v._v("保密性好")]),v._v(" "),_("li",[v._v("信任度高")])]),v._v(" "),_("h3",{attrs:{id:"https-的核心-ssl-tls协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-的核心-ssl-tls协议"}},[v._v("#")]),v._v(" HTTPS 的核心 — SSL / TLS协议")]),v._v(" "),_("p",[_("code",[v._v("HTTPS")]),v._v(" 之所以能达到较高的安全性要求, 就是结合了 "),_("code",[v._v("SSL / TLS")]),v._v(" 和 "),_("code",[v._v("TCP")]),v._v(" 协议, 对通信数据进行加密, 解决了 "),_("code",[v._v("HTTP")]),v._v(" 数据透明的问题. 接下来重点介绍一下 "),_("code",[v._v("SSL / TLS")]),v._v(" 的工作原理")]),v._v(" "),_("h4",{attrs:{id:"ssl-和-tls-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssl-和-tls-的区别"}},[v._v("#")]),v._v(" SSL 和 TLS 的区别")]),v._v(" "),_("p",[_("strong",[v._v("SSL 和 TLS 没有太大的区别")])]),v._v(" "),_("p",[_("code",[v._v("SSL")]),v._v(" 指安全套接字协议 ("),_("code",[v._v("Secure Sockets Layer")]),v._v(") , 首次发布与 1996 年. "),_("code",[v._v("SSL")]),v._v(" 的首次发布其实已经是他的 3.0 版本, "),_("code",[v._v("SSL")]),v._v(" 1.0 从未面世, "),_("code",[v._v("SSL")]),v._v(" 2.0 则具有较大的缺陷 ("),_("code",[v._v("DROWN")]),v._v(" 缺陷 - "),_("code",[v._v("Decrypting RSA with Obsolete and Weakened eNcryption")]),v._v(") . 很快, 在 1999 年, "),_("code",[v._v("SSL")]),v._v(" 3.0 进一步升级, "),_("strong",[v._v("新版本被命名为 "),_("code",[v._v("TLS")]),v._v(" 1.0")]),v._v(". 因此, "),_("code",[v._v("TLS")]),v._v(" 是基于 "),_("code",[v._v("SSL")]),v._v(" 之上的, 但由于习惯叫法, 通常把 "),_("code",[v._v("HTTPS")]),v._v(" 中的核心加密协议混成为 "),_("code",[v._v("SSL / TLS")])]),v._v(" "),_("h4",{attrs:{id:"ssl-tls-的工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssl-tls-的工作原理"}},[v._v("#")]),v._v(" SSL/TLS 的工作原理")]),v._v(" "),_("h5",{attrs:{id:"非对称加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密"}},[v._v("#")]),v._v(" 非对称加密")]),v._v(" "),_("p",[_("code",[v._v("SSL / TLS")]),v._v(" 的核心要素是"),_("strong",[v._v("非对称加密")]),v._v(". 非对称加密采用两个密钥——一个公钥, 一个私钥. 在通信时, 私钥仅由解密者保存, 公钥由任何一个想与解密者通信的发送者 (加密者) 所知.")]),v._v(" "),_("blockquote",[_("p",[v._v("图解")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101731491.png",alt:"img"}})]),v._v(" "),_("p",[v._v("非对称加密的公钥和私钥需要采用一种复杂的数学机制生成 (密码学认为, 为了较高的安全性, 尽量不要自己创造加密方案) . 公私钥对的生成算法依赖于单向陷门函数")]),v._v(" "),_("h5",{attrs:{id:"对称加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[v._v("#")]),v._v(" 对称加密")]),v._v(" "),_("p",[v._v("使用 "),_("code",[v._v("SSL / TLS")]),v._v(" 进行通信的双方需要使用非对称加密方案来通信, 但是非对称加密设计了较为复杂的数学算法, 在实际通信过程中, 计算的代价较高, 效率太低, 因此, "),_("code",[v._v("SSL / TLS")]),v._v(" 实际对消息的加密使用的是对称加密.")]),v._v(" "),_("p",[v._v("对称加密 : 通信双方共享唯一密钥 k, 加解密算法已知, 加密方利用密钥 k 加密, 解密方利用密钥 k 解密, 保密性依赖于密钥 k 的保密性.")]),v._v(" "),_("p",[v._v("对称加密的密钥生成代价比公私钥对的生成代价低得多, 那么有的人会问了, 为什么 "),_("code",[v._v("SSL / TLS")]),v._v(" 还需要使用非对称加密呢？因为对称加密的保密性完全依赖于密钥的保密性. 在双方通信之前, 需要商量一个用于对称加密的密钥. 我们知道网络通信的信道是不安全的, 传输报文对任何人是可见的, 密钥的交换肯定不能直接在网络信道中传输. 因此, 使用非对称加密, 对对称加密的密钥进行加密, 保护该密钥不在网络信道中被窃听. 这样, 通信双方只需要一次非对称加密, 交换对称加密的密钥, 在之后的信息通信中, 使用绝对安全的密钥, 对信息进行对称加密, 即可保证传输消息的保密性")]),v._v(" "),_("blockquote",[_("p",[v._v("图解")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-photo-yixihan.oss-cn-chengdu.aliyuncs.com/img/202208101731358.png",alt:"img"}})]),v._v(" "),_("h5",{attrs:{id:"公钥传输的信赖性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#公钥传输的信赖性"}},[v._v("#")]),v._v(" 公钥传输的信赖性")]),v._v(" "),_("p",[v._v("为了公钥传输的信赖性问题, 第三方机构应运而生——证书颁发机构 ("),_("code",[v._v("CA")]),v._v(", "),_("code",[v._v("Certificate Authority")]),v._v(") . "),_("code",[v._v("CA")]),v._v(" 默认是受信任的第三方. "),_("code",[v._v("CA")]),v._v(" 会给各个服务器颁发证书, 证书存储在服务器上, 并附有 "),_("code",[v._v("CA")]),v._v(" 的"),_("strong",[v._v("电子签名")])]),v._v(" "),_("p",[v._v("当客户端 (浏览器) 向服务器发送 "),_("code",[v._v("HTTPS")]),v._v(" 请求时, 一定要先获取目标服务器的证书, 并根据证书上的信息, 检验证书的合法性. 一旦客户端检测到证书非法, 就会发生错误. 客户端获取了服务器的证书后, 由于证书的信任性是由第三方信赖机构认证的, 而证书上又包含着服务器的公钥信息, 客户端就可以放心的信任证书上的公钥就是目标服务器的公钥")]),v._v(" "),_("h5",{attrs:{id:"数字签名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数字签名"}},[v._v("#")]),v._v(" 数字签名")]),v._v(" "),_("p",[v._v("第三方信赖机构 "),_("code",[v._v("CA")]),v._v(" 之所以能被信赖, 就是 "),_("strong",[v._v("靠数字签名技术")])]),v._v(" "),_("p",[v._v("数字签名, 是 "),_("code",[v._v("CA")]),v._v(" 在给服务器颁发证书时, 使用散列 + 加密的组合技术, 在证书上盖个章, 以此来提供验伪的功能.")]),v._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("端口号")]),v._v("  : "),_("code",[v._v("HTTP")]),v._v(" 默认是 80, "),_("code",[v._v("HTTPS")]),v._v(" 默认是 443")]),v._v(" "),_("li",[_("strong",[v._v("URL 前缀")]),v._v("  : "),_("code",[v._v("HTTP")]),v._v(" 的 "),_("code",[v._v("URL")]),v._v(" 前缀是 "),_("code",[v._v("http://")]),v._v(", "),_("code",[v._v("HTTPS")]),v._v(" 的 "),_("code",[v._v("URL")]),v._v(" 前缀是 "),_("code",[v._v("https://")])]),v._v(" "),_("li",[_("strong",[v._v("安全性和资源消耗")]),v._v("  :  "),_("code",[v._v("HTTP")]),v._v(" 协议运行在 "),_("code",[v._v("TCP")]),v._v(" 之上, 所有传输的内容都是明文, 客户端和服务器端都无法验证对方的身份. "),_("code",[v._v("HTTPS")]),v._v(" 是运行在 "),_("code",[v._v("SSL / TLS")]),v._v(" 之上的 "),_("code",[v._v("HTTP")]),v._v(" 协议, "),_("code",[v._v("SSL / TLS")]),v._v(" 运行在 "),_("code",[v._v("TCP")]),v._v(" 之上. 所有传输的内容都经过加密, 加密采用对称加密, 但对称加密的密钥用服务器方的证书进行了非对称加密. 所以说, "),_("code",[v._v("HTTP")]),v._v(" 安全性没有 "),_("code",[v._v("HTTPS")]),v._v(" 高, 但是 "),_("code",[v._v("HTTPS")]),v._v(" 比 "),_("code",[v._v("HTTP")]),v._v(" 耗费更多服务器资源")])]),v._v(" "),_("h2",{attrs:{id:"http-1-0-vs-http-1-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-vs-http-1-1"}},[v._v("#")]),v._v(" HTTP 1.0 vs HTTP 1.1")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("连接方式")]),v._v(" : "),_("code",[v._v("HTTP 1.0")]),v._v(" 为短连接, "),_("code",[v._v("HTTP 1.1")]),v._v(" 支持长连接")]),v._v(" "),_("li",[_("strong",[v._v("状态响应码")]),v._v(" : "),_("code",[v._v("HTTP/1.1")]),v._v(" 中新加入了大量的状态码, 光是错误响应状态码就新增了 24 种. 比如说, "),_("code",[v._v("100 (Continue)")]),v._v("——在请求大资源前的预热请求, "),_("code",[v._v("206 (Partial Content)")]),v._v("——范围请求的标识码, "),_("code",[v._v("409 (Conflict)")]),v._v("——请求与当前资源的规定冲突, "),_("code",[v._v("410 (Gone)")]),v._v("——资源已被永久转移, 而且没有任何已知的转发地址")]),v._v(" "),_("li",[_("strong",[v._v("缓存处理")]),v._v(" : 在 "),_("code",[v._v("HTTP1.0")]),v._v(" 中主要使用 "),_("code",[v._v("header")]),v._v(" 里的 "),_("code",[v._v("If-Modified-Since")]),v._v(", "),_("code",[v._v("Expires")]),v._v(" 来做为缓存判断的标准, "),_("code",[v._v("HTTP1.1")]),v._v(" 则引入了更多的缓存控制策略例如 "),_("code",[v._v("Entity tag")]),v._v(", "),_("code",[v._v("If-Unmodified-Since")]),v._v(", "),_("code",[v._v("If-Match")]),v._v(", "),_("code",[v._v("If-None-Match")]),v._v(" 等更多可供选择的缓存头来控制缓存策略")]),v._v(" "),_("li",[_("strong",[v._v("带宽优化及网络连接的使用")]),v._v(" : "),_("code",[v._v("HTTP1.0")]),v._v(" 中, 存在一些浪费带宽的现象, 例如客户端只是需要某个对象的一部分, 而服务器却将整个对象送过来了, 并且不支持断点续传功能, "),_("code",[v._v("HTTP1.1")]),v._v(" 则在请求头引入了 "),_("code",[v._v("range")]),v._v(" 头域, 它允许只请求资源的某个部分, 即返回码是 "),_("code",[v._v("206 (Partial Content)")]),v._v(", 这样就方便了开发者自由的选择以便于充分利用带宽和连接")]),v._v(" "),_("li",[_("strong",[v._v("Host头处理")]),v._v(" : "),_("code",[v._v("HTTP/1.1")]),v._v(" 在请求头中加入了 "),_("code",[v._v("Host")]),v._v(" 字段")])])])}),[],!1,null,null,null);_.default=e.exports}}]);